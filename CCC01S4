import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class CCC01SR {

    /**
     * Any 3 points: Use formula (abc/\sqrt{(a+b+c)(a+b-c)(a-b+c)(-a+b+c)}) if acute.
     Use longest length otherwise
     
     Take max result
     
     */
    public static void main(String[] args) throws IOException {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        int N=Integer.parseInt(br.readLine());
        String str; String[] t;
        int[][] points=new int[N][2];
        for (int i = 0; i < N; i++) {
            str=br.readLine();
            t=str.split("\\ ");
            points[i][0]=Integer.parseInt(t[0]);
            points[i][1]=Integer.parseInt(t[1]);
        }
        double[][] pairwiseDist=new double[N][N];
        for (int i = 0; i < N-1; i++) {
            for (int j = i+1; j < N; j++) {
                pairwiseDist[i][j]=
                        Math.sqrt((points[i][0]-points[j][0])*(points[i][0]-points[j][0])+
                                (points[i][1]-points[j][1])*(points[i][1]-points[j][1]));
            }
        }
        double max=0;
        double s1; double s2; double s3;
        for (int i = 0; i < N-2; i++) {
               for (int j = i+1; j < N-1; j++) {
                   for (int k = j+1; k < N; k++) {
                       s1=pairwiseDist[i][j];
                       s2=pairwiseDist[i][k];
                       s3=pairwiseDist[j][k];
                       max=Math.max(max,circumrad(s1,s2,s3));
                   }
            }
        }
        
        
    }
    public static double circumrad(double s1, double s2, double s3){
        boolean isNonAcute=(s1*s1+s2*s2-s3*s3 <=0)||
                               (s1*s1-s2*s2+s3*s3<=0)||(s2*s2+s3*s3-s1*s1<=0);
                       if(isNonAcute){
                           double d=0;
                           if(s1>d)d=s1;
                           if(s2>d)d=s2;
                           if(s3>d)d=s3;
                           double rounded=Math.round(d*100.00)/100.00;
                           
                           
                           return(rounded);
                       }else{
                            double min=0;
                            double circumdiam=(s1*s2*s3*2)/Math.sqrt((s1+s2+s3)*(s1+s2-s3)*(s1-s2+s3)*(-s1+s2+s3));
                            min=Math.max(min, circumdiam);
                            double rounded=Math.round(min*100.00)/100.00;
                            return rounded;
                       }
    }
    
}
